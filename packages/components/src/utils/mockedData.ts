import {
  Account,
  AccountIdentifierType,
  Currency,
  PaymentResult,
  PayoutStatus,
  UserRoleAndUserInvite,
  UserRoles,
  UserStatus,
} from '@nofrixion/moneymoov'

import {
  LocalAccountIdentifierType,
  LocalAddressType,
  LocalPartialPaymentMethods,
  LocalPaymentAttemptEventType,
  LocalPaymentAttemptStatus,
  LocalPaymentMethodTypes,
  LocalWallets,
} from '../types/LocalEnums'
import {
  LocalAccount,
  LocalAccountIdentifier,
  LocalAccountWithTransactionMetrics,
  LocalBeneficiary,
  LocalCounterparty,
  LocalInvoice,
  LocalPaymentAttempt,
  LocalPaymentAttemptEvent,
  LocalPaymentRequest,
  LocalPayout,
  LocalTransaction,
} from '../types/LocalTypes'

export const mockTags = [
  {
    id: '1',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A tag',
  },
  {
    id: '2',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'Another tag',
  },
  {
    id: '3',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A reeeeallllly long tag name',
  },
  {
    id: '4',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'You get the idea',
  },
]

export const mockMerchantTags = [
  {
    id: '1',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A tag',
  },
  {
    id: '2',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'Another tag',
  },
  {
    id: '3',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A reeeeallllly long tag name',
  },
  {
    id: '4',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'You get the idea',
  },
  {
    id: '5',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A merchant tag 1',
  },
  {
    id: '6',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A merchant tag 2',
  },
  {
    id: '7',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A merchant tag 3',
  },
  {
    id: '8',
    merchantID: '3780263C-5926-4B79-AC84-224D64290DBF',
    name: 'A merchant tag 4',
  },
]

export const mockRefundAttempts = [
  {
    refundPayoutID: '1',
    refundInitiatedAt: new Date('2023-05-18T00:00:00.000Z'),
    refundSettledAt: new Date('2023-05-18T00:00:00.000Z'),
    refundInitiatedAmount: 5,
    refundSettledAmount: 5,
    refundCancelledAmount: 0,
    isCardVoid: false,
  },
  {
    refundPayoutID: '2',
    refundInitiatedAt: new Date('2023-05-18T00:00:00.000Z'),
    refundSettledAt: new Date('2023-05-18T00:00:00.000Z'),
    refundInitiatedAmount: 3,
    refundSettledAmount: 3,
    refundCancelledAmount: 0,
    isCardVoid: false,
  },
]

export const mockAccounts: Account[] = [
  {
    id: 'BE270F6F-04F1-4DE9-836C-035C5B7EC409',
    merchantID: '8A45B3B8-7428-4BA2-8228-37204B43AC0E',
    accountNumber: '',
    accountName: 'NoFrixion EUR account',
    availableBalance: 100000.0,
    balance: 120000.0,
    currency: Currency.EUR,
    displayName: 'NoFrixion EUR account',
    iban: 'GB93MOCK00000003290619',
    sortCode: '',
    summary: '',
    identifier: {
      type: AccountIdentifierType.IBAN,
      currency: Currency.EUR,
      bic: 'MOCKGB21',
      iban: 'GB93MOCK00000003290619',
      accountNumber: '',
      sortCode: '',
    },
    isDefault: true,
    expiryDate: '',
    consentID: '',
    isConnectedAccount: false,
    bankName: '',
  },
  {
    id: 'C317F3DF-51F5-4EF6-8DDA-41444B90B2D5',
    merchantID: '8A45B3B8-7428-4BA2-8228-37204B43AC0E',
    accountName: 'NoFrixion GBP account',
    accountNumber: '12345678',
    availableBalance: 50022.6,
    balance: 50022.6,
    currency: Currency.GBP,
    displayName: 'NoFrixion GBP account',
    iban: '',
    sortCode: '123456',
    summary: '',
    identifier: {
      type: AccountIdentifierType.SCAN,
      currency: Currency.GBP,
      bic: 'MOCKGB21',
      iban: '',
      accountNumber: '12345678',
      sortCode: '123456',
    },
    isDefault: false,
    expiryDate: '',
    consentID: '',
    isConnectedAccount: false,
    bankName: '',
  },
  {
    id: 'C317F3DF-51F5-4EF6-8DDA-41444B90B2D5',
    merchantID: '8A45B3B8-7428-4BA2-8228-37204B43AC0E',
    accountName: 'Test GBP account',
    accountNumber: '12345678',
    availableBalance: 50022.6,
    balance: 50022.6,
    currency: Currency.GBP,
    displayName: 'NoFrixion GBP account display',
    iban: '',
    sortCode: '123456',
    summary: '',
    identifier: {
      type: AccountIdentifierType.SCAN,
      currency: Currency.GBP,
      bic: 'MOCKGB21',
      iban: '',
      accountNumber: '12345678',
      sortCode: '123456',
    },
    isDefault: false,
    expiryDate: '',
    consentID: '',
    isConnectedAccount: false,
    bankName: '',
  },
]

export const mockPaymentAttemptEvents: LocalPaymentAttemptEvent[] = [
  {
    eventType: LocalPaymentAttemptEventType.AuthenticationSetupStarted,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.AuthenticationFailure,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.Authorised,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.AuthorisationFailed,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.Refunded,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
    refundedAmount: 5,
  },
  {
    eventType: LocalPaymentAttemptEventType.PartiallyRefunded,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
    refundedAmount: 5,
  },
  {
    eventType: LocalPaymentAttemptEventType.RefundAwaitingAuthorisation,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
    refundedAmount: 5,
  },
  {
    eventType: LocalPaymentAttemptEventType.Received,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.Voided,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.BankPaymentInitiated,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.RefundFailed,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
    refundedAmount: 5,
  },
  {
    eventType: LocalPaymentAttemptEventType.SettlementFailed,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.Captured,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
    capturedAmount: 5,
  },
  {
    eventType: LocalPaymentAttemptEventType.CaptureFailed,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
  },
  {
    eventType: LocalPaymentAttemptEventType.PartiallyCaptured,
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    currency: Currency.EUR,
    capturedAmount: 5,
  },
]

export const mockPaymentAttempts: LocalPaymentAttempt[] = [
  {
    attemptKey: 'a3b752d2-c0a6-4846-90e5-d783bb4ec005',
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 20.02,
    currency: Currency.EUR,
    processor: 'Visa',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 20.02, capturedAt: new Date('2023-05-18T00:00:00.000Z') }],
    refundAttempts: mockRefundAttempts,
    authorisedAmount: 0,
    cardAuthorisedAmount: 20.02,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.PartiallyRefunded,
    events: mockPaymentAttemptEvents,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
  {
    attemptKey: 'f4c6e747-6fd6-4a3c-be3b-4d3edd258b35',
    occurredAt: new Date('2023-03-23T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 30.57,
    currency: Currency.EUR,
    processor: 'MasterCard',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 30.57, capturedAt: new Date('2023-03-23T00:00:00.000Z') }],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 30.57,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Refunded,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
  {
    attemptKey: 'ca2eb453-9c12-4f8f-b8b2-7c1c6af842ba',
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Pisp,
    amount: 92.99,
    currency: Currency.EUR,
    processor: 'Revolut',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 924852422.99,
    captureAttempts: [],
    refundAttempts: [],
    authorisedAmount: 924852422.99,
    cardAuthorisedAmount: 0,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Received,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
  {
    attemptKey: '43535f79-a9f2-4331-9a78-db731e467c49',
    occurredAt: new Date('2023-05-02T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Pisp,
    amount: 7.9,
    currency: Currency.EUR,
    processor: 'Bank of Ireland',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 7.9,
    captureAttempts: [],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 0,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.InProgress,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
  {
    attemptKey: 'a9f6c19a-0172-47a6-803a-c3f59899cafc',
    occurredAt: new Date('2023-05-01T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 15.39,
    currency: Currency.EUR,
    processor: 'Apple Pay',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 15.39, capturedAt: new Date('2023-05-01T00:00:00.000Z') }],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 15.39,
    wallet: LocalWallets.ApplePay,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Failed,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
  {
    attemptKey: '7bbb2998-8d78-4b2a-9334-84444c9915c8',
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 20.78,
    currency: Currency.EUR,
    processor: 'Google Pay',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 20.78, capturedAt: new Date('2023-05-18T00:00:00.000Z') }],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 20.78,
    wallet: LocalWallets.GooglePay,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Voided,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
]

export const partiallyPaidMockPaymentAttempts: LocalPaymentAttempt[] = [
  {
    attemptKey: 'a3b752d2-c0a6-4846-90e5-d783bb4ec005',
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 20.02,
    currency: Currency.EUR,
    processor: 'Visa',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 20.02, capturedAt: new Date('2023-05-18T00:00:00.000Z') }],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 20.02,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Received,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
  {
    attemptKey: 'f4c6e747-6fd6-4a3c-be3b-4d3edd258b35',
    occurredAt: new Date('2023-03-23T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 30.57,
    currency: Currency.EUR,
    processor: 'MasterCard',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 30.57, capturedAt: new Date('2023-03-23T00:00:00.000Z') }],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 30.57,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Received,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
]
export const overpaidMockPaymentAttempts: LocalPaymentAttempt[] = [
  {
    attemptKey: 'a3b752d2-c0a6-4846-90e5-d783bb4ec005',
    occurredAt: new Date('2023-05-18T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 20.02,
    currency: Currency.EUR,
    processor: 'Visa',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 20.02, capturedAt: new Date('2023-05-18T00:00:00.000Z') }],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 20.02,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Received,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
  {
    attemptKey: 'f4c6e747-6fd6-4a3c-be3b-4d3edd258b35',
    occurredAt: new Date('2023-03-23T00:00:00.000Z'),
    paymentMethod: LocalPaymentMethodTypes.Card,
    amount: 90.57,
    currency: Currency.EUR,
    processor: 'MasterCard',
    last4DigitsOfCardNumber: '1234',
    settledAmount: 0,
    captureAttempts: [{ capturedAmount: 90.57, capturedAt: new Date('2023-03-23T00:00:00.000Z') }],
    refundAttempts: [],
    authorisedAmount: 0,
    cardAuthorisedAmount: 90.57,
    wallet: undefined,
    status: 'paid',
    paymentStatus: 'received',
    displayStatus: LocalPaymentAttemptStatus.Received,
    latestEventOccurredAt: new Date('2023-05-18T00:00:00.000Z'),
  },
]

const regular: LocalPaymentRequest = {
  id: 'fa14171f-5fe6-4326-8c09-a9b59bbf6e7b',
  amount: 100.0,
  amountReceived: 0,
  amountRefunded: 0,
  amountPending: 0,
  currency: Currency.EUR,
  paymentMethodTypes: [
    LocalPaymentMethodTypes.Card,
    LocalPaymentMethodTypes.Pisp,
    LocalPaymentMethodTypes.ApplePay,
    LocalPaymentMethodTypes.GooglePay,
  ],
  addresses: [
    {
      addressType: LocalAddressType.Shipping,
      addressLine1: '8 Harcourt Street',
      addressLine2: '',
      addressCity: 'Dublin',
      addressCounty: 'Dublin',
      addressPostCode: 'D02 AF58',
      addressCountryCode: 'Ireland',
      phone: '+35319695400',
      email: 'contact@nofrixion.com',
    },
  ],
  partialPaymentMethod: LocalPartialPaymentMethods.None,
  status: 'paid',
  createdAt: new Date('2023-05-17T19:02:37.8484876+00:00'),
  tags: mockTags,
  contact: {
    name: 'John Doe',
    email: 'johndoe@email.com',
  },
  hostedPayCheckoutUrl: 'https://api-dev.nofrixion.com/pay/fa14171f-5fe6-4326-8c09-a9b59bbf6e7b',
  description:
    'Curabitur ultricies ligula vitae tellus fringilla consequat. Pellentesque in tortor eu nibh lobortis ultrices vel in quam. Nunc tristique egestas purus et hendrerit.',
  productOrService: 'Flight lessons',
  paymentAttempts: mockPaymentAttempts,
  captureFunds: true,
  remoteStatus: PaymentResult.FullyPaid,
}

const partiallyPaidPaymentRequest: LocalPaymentRequest = {
  ...regular,
  paymentAttempts: partiallyPaidMockPaymentAttempts,
  status: 'partial',
}

const unpaidPaymentRequest: LocalPaymentRequest = {
  ...regular,
  paymentAttempts: [],
  status: 'unpaid',
}

const overpaidPaymentRequest: LocalPaymentRequest = {
  ...regular,
  paymentAttempts: overpaidMockPaymentAttempts,
  status: 'overpaid',
}

const noShippingAddress: LocalPaymentRequest = {
  id: '5cb6f5c8-ce16-411f-9f55-29fb022bb444',
  amount: 285.0,
  amountReceived: 0,
  amountRefunded: 0,
  amountPending: 0,
  currency: Currency.EUR,
  paymentMethodTypes: [
    LocalPaymentMethodTypes.Pisp,
    LocalPaymentMethodTypes.ApplePay,
    LocalPaymentMethodTypes.GooglePay,
  ],
  addresses: [],
  partialPaymentMethod: LocalPartialPaymentMethods.None,
  status: 'unpaid',
  tags: [],
  createdAt: new Date('2023-05-17T19:02:37.8484876+00:00'),
  contact: {
    name: 'John Doe',
    email: 'johndoe@email.com',
  },
  hostedPayCheckoutUrl: 'https://api-dev.nofrixion.com/pay/5cb6f5c8-ce16-411f-9f55-29fb022bb444',
  description:
    'Curabitur ultricies ligula vitae tellus fringilla consequat. Pellentesque in tortor eu nibh lobortis ultrices vel in quam. Nunc tristique egestas purus et hendrerit.',
  productOrService: 'Flight lessons',
  paymentAttempts: mockPaymentAttempts,
  captureFunds: true,
  remoteStatus: PaymentResult.None,
}

const fewPaymentRequests: LocalPaymentRequest[] = [
  {
    id: '1',
    status: 'unpaid',
    createdAt: new Date(new Date(new Date().setDate(new Date().getDate() - 1))),
    contact: {
      name: 'Lukas Müller',
      email: 'lukas.mueller@email.de',
    },
    amount: 900,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.EUR,
    tags: [
      {
        id: '1',
        description: 'Logo Design',
        colourHex: '#FF0000',
        name: 'Logo Design',
        merchantID: '1',
      },
      {
        id: '2',
        description: 'Web Design',
        colourHex: '#00FF00',
        name: 'Web Design',
        merchantID: '1',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    createdByUser: {
      id: '1',
      firstName: 'John',
      lastName: 'Doe',
      email: 'johndoe@email.com',
      isAdmin: true,
      isAuthoriser: true,
    },
    remoteStatus: PaymentResult.None,
  },
  {
    id: '2',
    status: 'unpaid',
    createdAt: new Date(new Date(new Date().setDate(new Date().getDate() - 3))),
    contact: {
      name: 'Miguel García',
      email: 'miguel.garcia@email.es',
    },
    amount: 1800,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.EUR,
    tags: [
      {
        id: '3',
        description: 'App Development',
        colourHex: '#0000FF',
        name: 'App Development',
        merchantID: '1',
      },
      {
        id: '4',
        description: 'UI Design',
        colourHex: '#FF00FF',
        name: 'UI Design',
        merchantID: '1',
      },
      {
        id: '5',
        description: 'EU Client',
        colourHex: '#FFFF00',
        name: 'EU Client',
        merchantID: '1',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    createdByUser: {
      id: '1',
      firstName: 'JohnVeryLognNameThatWillBeTruncated',
      lastName: 'Doe',
      email: 'johndoe@email.com',
      isAdmin: true,
      isAuthoriser: true,
    },
    remoteStatus: PaymentResult.None,
  },
  {
    id: '3',
    status: 'unpaid',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 5)),
    contact: {
      name: 'Lucas Jones',
      email: 'lucas.jones@email.co.uk',
    },
    amount: 2700,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.GBP,
    tags: [
      {
        id: '6',
        description: 'ecommerce',
        colourHex: '#FF0000',
        name: 'ecommerce',
        merchantID: '1',
      },
      {
        id: '7',
        description: 'web-development',
        colourHex: '#00FF00',
        name: 'web-development',
        merchantID: '1',
      },
      {
        id: '8',
        description: 'London-client',
        colourHex: '#0000FF',
        name: 'London-client',
        merchantID: '1',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    merchantTokenDescription: 'Test merchant token description',
    remoteStatus: PaymentResult.None,
  },
  {
    id: '4',
    status: 'paid',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 7)),
    contact: {
      name: 'Sophie Smith',
      email: 'sophie.smith@email.co.uk',
    },
    amount: 2500,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.GBP,
    tags: [
      {
        id: '9',
        description: 'web-design',
        colourHex: '#FF0000',
        name: 'web-design',
        merchantID: '1',
      },
      {
        id: '10',
        description: 'branding',
        colourHex: '#00FF00',
        name: 'branding',
        merchantID: '1',
      },
      {
        id: '11',
        description: 'London-client',
        colourHex: '#0000FF',
        name: 'London-client',
        merchantID: '1',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.FullyPaid,
  },
  {
    id: '5',
    status: 'unpaid',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 10)),
    contact: {
      name: 'Oliver Johnson',
      email: 'oliver.johnson@email.co.uk',
    },
    amount: 3000,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.GBP,
    tags: [
      {
        id: '7',
        description: 'web-development',
        colourHex: '#FF0000',
        name: 'web-development',
        merchantID: '1',
      },
      {
        id: '6',
        description: 'ecommerce',
        colourHex: '#00FF00',
        name: 'ecommerce',
        merchantID: '1',
      },
      {
        id: '11',
        description: 'London-client',
        colourHex: '#0000FF',
        name: 'London-client',
        merchantID: '1',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.None,
  },
  {
    id: '6',
    status: 'partial',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 11)),
    contact: {
      name: 'Ava Wilson',
      email: 'ava.wilson@email.co.uk',
    },
    amount: 1500,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.GBP,
    tags: [
      {
        id: '7',
        description: 'web-development',
        colourHex: '#FF0000',
        name: 'web-development',
        merchantID: '1',
      },
      {
        id: '6',
        description: 'ecommerce',
        colourHex: '#00FF00',
        name: 'ecommerce',
        merchantID: '1',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.PartiallyPaid,
  },
  {
    id: '7',
    status: 'partial',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 14)),
    contact: {
      name: 'Emily Brown',
      email: 'emily.brown@email.co.uk',
    },
    amount: 1200,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.GBP,
    tags: [
      {
        id: '12',
        name: 'SEO',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Search Engine Optimization',
      },
      {
        id: '13',
        name: 'content-creation',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Content Creation',
      },
      {
        id: '14',
        name: 'London-client',
        merchantID: '1',
        colourHex: '#000000',
        description: 'London Client',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.PartiallyPaid,
  },
  {
    id: '8',
    status: 'paid',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 15)),
    contact: {
      name: 'Giuseppe Bianchi',
      email: 'giuseppe.bianchi@email.it',
    },
    amount: 2300,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.EUR,
    tags: [
      {
        id: '15',
        name: 'web-design',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Web Design',
      },
      {
        id: '16',
        name: 'responsive-design',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Responsive Design',
      },
      {
        id: '17',
        name: 'EU-client',
        merchantID: '1',
        colourHex: '#000000',
        description: 'EU Client',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.FullyPaid,
  },
  {
    id: '9',
    status: 'paid',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 20)),
    contact: {
      name: 'François Dubois',
      email: 'francois.dubois@email.fr',
    },
    amount: 1000,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.EUR,
    tags: [
      {
        id: '18',
        name: 'logo-design',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Logo Design',
      },
      {
        id: '19',
        name: 'branding',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Branding',
      },
      {
        id: '20',
        name: 'EU-client',
        merchantID: '1',
        colourHex: '#000000',
        description: 'EU Client',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.FullyPaid,
  },
  {
    id: '10',
    status: 'paid',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 22)),
    contact: {
      name: 'Isabella Lewis',
      email: 'isabella.lewis@email.co.uk',
    },
    amount: 3500,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.GBP,
    tags: [
      {
        id: '21',
        name: 'UX-design',
        merchantID: '1',
        colourHex: '#000000',
        description: 'UX Design',
      },
      {
        id: '22',
        name: 'app-development',
        merchantID: '1',
        colourHex: '#000000',
        description: 'App Development',
      },
      {
        id: '23',
        name: 'London-client',
        merchantID: '1',
        colourHex: '#000000',
        description: 'London Client',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.FullyPaid,
  },
  {
    id: '11',
    status: 'paid',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 25)),
    contact: {
      name: 'Lily Taylor',
      email: 'lily.taylor@email.co.uk',
    },
    amount: 4200,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.GBP,
    tags: [
      {
        id: '24',
        name: 'web-design',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Web Design',
      },
      {
        id: '25',
        name: 'branding',
        merchantID: '1',
        colourHex: '#000000',
        description: 'Branding',
      },
      {
        id: '26',
        name: 'London-client',
        merchantID: '1',
        colourHex: '#000000',
        description: 'London Client',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.FullyPaid,
  },
  {
    id: '12',
    status: 'partial',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 30)),
    contact: {
      name: 'Maria Silva',
      email: 'maria.silva@email.pt',
    },
    amount: 2200,
    amountReceived: 0,
    amountRefunded: 0,
    amountPending: 0,
    currency: Currency.EUR,
    tags: [
      {
        id: '27',
        name: 'UI-design',
        merchantID: '1',
        colourHex: '#000000',
        description: 'UI Design',
      },
      {
        id: '28',
        name: 'app-development',
        merchantID: '1',
        colourHex: '#000000',
        description: 'App Development',
      },
      {
        id: '29',
        name: 'EU-client',
        merchantID: '1',
        colourHex: '#000000',
        description: 'EU Client',
      },
    ],
    addresses: [],
    partialPaymentMethod: LocalPartialPaymentMethods.None,
    paymentMethodTypes: [LocalPaymentMethodTypes.Card, LocalPaymentMethodTypes.Pisp],
    description: '',
    hostedPayCheckoutUrl: '',
    paymentAttempts: [],
    productOrService: '',
    captureFunds: true,
    remoteStatus: PaymentResult.PartiallyPaid,
  },
]

function randomDate(start = new Date(2012, 0, 1), end = new Date()) {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))
}

export const mockedTransactions: LocalTransaction[] = [
  {
    id: '1',
    accountName: 'My Account',
    date: randomDate(),
    counterParty: {
      name: 'Daniel Kowalski',
      accountInfo: 'IE11MODR99035501927019',
    },
    amount: -250.0,
    currency: Currency.EUR,
    reference: 'Dinner Payment',
    description: 'Lorem Ipsum er ganske enkelt fyldtekst fra print- og typografiindustrien.',
    type: 'SEPA',
  },
  {
    id: '2',
    accountName: 'My Account',
    date: randomDate(),
    counterParty: {
      name: 'Daniel Kowalski',
      accountInfo: 'IE11MODR99035501927019',
    },
    amount: 1500000.99,
    currency: Currency.EUR,
    reference: 'Very very very long reference. As long as it can be. Or even longer.',
    description: 'Lorem Ipsum er ganske enkelt fyldtekst fra print- og typografiindustrien.',
    type: 'SEPA Instant',
  },
  {
    id: '3',
    accountName: 'My Account',
    date: randomDate(),
    counterParty: {
      name: 'Daniel Kowalski',
      accountInfo: 'IE11MODR99035501927019',
    },
    amount: -350.0,
    currency: Currency.EUR,
    reference: 'Dinner Payment',
    description: 'Lorem Ipsum er ganske enkelt fyldtekst fra print- og typografiindustrien.',
    type: 'SEPA Instant',
  },
  {
    id: '4',
    accountName: 'My Account',
    date: randomDate(),
    counterParty: {
      name: 'Daniel Kowalski',
      accountInfo: 'IE11MODR99035501927019',
    },
    amount: 450.0,
    currency: Currency.EUR,
    balanceAfterTx: 32345,
    reference: 'Dinner Payment',
    description: 'Lorem Ipsum er ganske enkelt fyldtekst fra print- og typografiindustrien.',
    type: 'SEPA',
  },
  {
    id: '5',
    accountName: 'My Account',
    date: randomDate(),
    counterParty: {
      name: 'Daniel Kowalski',
      accountInfo: 'IE11MODR99035501927019',
    },
    amount: -550.0,
    currency: Currency.EUR,
    balanceAfterTx: 32345,
    reference: 'Dinner Payment',
    description: 'Lorem Ipsum er ganske enkelt fyldtekst fra print- og typografiindustrien.',
    type: '',
  },
  {
    id: '6',
    accountName: 'My Account',
    date: randomDate(),
    counterParty: {
      name: 'Daniel Kowalski',
      accountInfo: 'IE11MODR99035501927019',
    },
    amount: 200.0,
    currency: Currency.EUR,
    balanceAfterTx: 32345,
    reference: 'Dinner Payment',
    description: 'Lorem Ipsum er ganske enkelt fyldtekst fra print- og typografiindustrien.',
    type: 'SEPA Instant',
  },
  {
    id: '7',
    accountName: 'My Account',
    date: randomDate(),
    counterParty: {
      name: 'Daniel Kowalski',
      accountInfo: 'IE11MODR99035501927019',
    },
    amount: -300.0,
    currency: Currency.EUR,
    balanceAfterTx: 32345,
    reference: 'Dinner Payment',
    description: 'Lorem Ipsum er ganske enkelt fyldtekst fra print- og typografiindustrien.',
    type: '',
  },
]

export const mockPayouts: LocalPayout[] = [
  {
    accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
    amount: 1.33,
    createdBy: 'Arif Matin',
    currency: Currency.EUR,
    description: 'webhooks',
    destination: {
      name: 'test account 1',
      accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
      emailAddress: '',
      phoneNumber: 'dfsd',
      identifier: {
        type: LocalAccountIdentifierType.IBAN,
        currency: 'EUR',
        iban: 'IE29AIBK93115212345678',
        accountNumber: '',
        sortCode: '',
        bic: '',
      },
    },
    id: 'a1e02254-e605-467a-487c-08db97ef5455',
    inserted: randomDate(),
    merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
    type: LocalAccountIdentifierType.IBAN,
    sourceAccountName: 'EUR Payment',
    sourceAccountIban: 'IE29AIBK93115212345678',
    sourceAccountNumber: '12345678',
    sourceAccountSortCode: '123456',
    status: PayoutStatus.PROCESSED,
    theirReference: 'refe&12',
    yourReference: 'internal reference ',
    tags: [
      {
        id: '1',
        name: 'Logo Design',
        description: 'Logo Design',
        merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
      },
    ],
    activities: [],
  },
  {
    accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
    amount: 1.33,
    createdBy: 'Arif Matin',
    currency: Currency.EUR,
    description: 'webhooks',
    destination: {
      name: 'test account 1',
      accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
      emailAddress: '',
      phoneNumber: 'dfsd',
      identifier: {
        type: LocalAccountIdentifierType.IBAN,
        currency: 'EUR',
        iban: undefined,
        accountNumber: '12345678',
        sortCode: '222222',
        bic: '',
      },
    },
    id: 'a1e02254-e605-467a-487c-08db97ef5455',
    inserted: randomDate(),
    merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
    type: LocalAccountIdentifierType.IBAN,
    sourceAccountName: 'EUR Payment',
    sourceAccountIban: 'IE29AIBK93115212345678',
    sourceAccountNumber: '12345678',
    sourceAccountSortCode: '123456',
    status: PayoutStatus.QUEUED,
    theirReference: 'refe&12',
    yourReference: 'internal reference ',
    tags: [
      {
        id: '2',
        name: 'Web Design',
        description: 'Web Design',
        merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
      },
    ],
    activities: [],
  },
  {
    accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
    amount: 1.33,
    createdBy: 'Arif Matin',
    currency: Currency.EUR,
    description: 'webhooks',
    destination: {
      name: 'test account 1',
      accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
      emailAddress: '',
      phoneNumber: 'dfsd',
      identifier: {
        type: LocalAccountIdentifierType.IBAN,
        currency: 'EUR',
        iban: 'IE29AIBK93115212345678',
        accountNumber: '',
        sortCode: '',
        bic: '',
      },
    },
    id: 'a1e02254-e605-467a-487c-08db97ef5455',
    inserted: randomDate(),
    merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
    type: LocalAccountIdentifierType.IBAN,
    sourceAccountName: 'EUR Payment',
    sourceAccountIban: 'IE29AIBK93115212345678',
    sourceAccountNumber: '12345678',
    sourceAccountSortCode: '123456',
    status: PayoutStatus.FAILED,
    theirReference: 'refe&12',
    yourReference: 'internal reference ',
    tags: [
      {
        id: '3',
        name: 'App Development',
        description: 'App Development',
        merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
      },
    ],
    activities: [],
  },
  {
    accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
    amount: 111953.99,
    createdBy: 'Arif Matin',
    currency: Currency.EUR,
    description: 'webhooks',
    destination: {
      name: 'test account 1',
      accountID: '0678bfaa-4683-4dd9-8be8-cada724688d7',
      emailAddress: '',
      phoneNumber: 'dfsd',
      identifier: {
        type: LocalAccountIdentifierType.IBAN,
        currency: 'EUR',
        iban: 'IE29AIBK93115212345678',
        accountNumber: '',
        sortCode: '',
        bic: '',
      },
    },
    id: 'a1e02254-e605-467a-487c-08db97ef5455',
    inserted: randomDate(),
    merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
    type: LocalAccountIdentifierType.IBAN,
    sourceAccountName: 'EUR Payment',
    sourceAccountIban: 'IE29AIBK93115212345678',
    sourceAccountNumber: '12345678',
    sourceAccountSortCode: '123456',
    status: PayoutStatus.PENDING_APPROVAL,
    theirReference: 'refe&12',
    yourReference: 'internal reference ',
    tags: [
      {
        id: '4',
        name: 'UI Design',
        description: 'UI Design',
        merchantID: 'c544ae7e-e7f8-4482-552e-08daf005c17b',
      },
    ],
    activities: [],
  },
]

const eurAccountIdentifier: LocalAccountIdentifier = {
  type: LocalAccountIdentifierType.IBAN,
  currency: Currency.EUR,
  iban: 'GB12345678901234567890',
}

const gbpAccountIdentifier: LocalAccountIdentifier = {
  type: LocalAccountIdentifierType.SCAN,
  currency: Currency.GBP,
  accountNumber: '12345678',
  sortCode: '123456',
}

const accounts: LocalAccount[] = [
  {
    id: '7',
    accountName: 'E account',
    currency: Currency.GBP,
    balance: 100000,
    merchantID: '1',
    accountNumber: '12345678',
    sortCode: '123456',
    displayName: 'GBP Account',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: false,
    availableBalance: 100000,
  },
  {
    id: '4',
    accountName: 'EURO Account 2',
    currency: Currency.EUR,
    balance: 100,
    merchantID: '1',
    iban: 'GB12345678901234567890',
    displayName: 'EURO Account',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: true,
    availableBalance: 100,
  },
  {
    id: '1',
    accountName: 'EURO Account',
    currency: Currency.EUR,
    balance: 100,
    merchantID: '1',
    iban: 'GB12345678901234567890',
    displayName: 'EURO Account',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: true,
    availableBalance: 100,
  },

  {
    id: '2',
    accountName: 'GBP Account',
    currency: Currency.GBP,
    balance: 100000,
    merchantID: '1',
    accountNumber: '12345678',
    sortCode: '123456',
    displayName: 'GBP Account',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: false,
    availableBalance: 100000,
  },
  {
    id: '3',
    accountName: 'GBP Account 2',
    currency: Currency.GBP,
    balance: 100000,
    merchantID: '1',
    accountNumber: '12345678',
    sortCode: '123456',
    displayName: 'EUR Account 2',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: false,
    availableBalance: 100000,
  },
  {
    id: '5',
    accountName: 'A account',
    currency: Currency.EUR,
    balance: 100,
    merchantID: '1',
    iban: 'GB12345678901234567890',
    displayName: 'EURO Account',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: true,
    availableBalance: 100,
  },
  {
    id: '6',
    accountName: 'B account',
    currency: Currency.EUR,
    balance: 100,
    merchantID: '1',
    iban: 'GB12345678901234567890',
    displayName: 'EURO Account',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: true,
    availableBalance: 100,
  },

  {
    id: '8',
    accountName: 'D account',
    currency: Currency.GBP,
    balance: 100000,
    merchantID: '1',
    accountNumber: '12345678',
    sortCode: '123456',
    displayName: 'EUR Account 2',
    identifier: eurAccountIdentifier,
    summary: 'Account',
    isDefault: false,
    availableBalance: 100000,
  },
]
const account: Account = {
  accountName: 'MARIO ROSSI',
  accountNumber: '',
  availableBalance: 5022,
  balance: 5022,
  bankName: 'Fineco Sandbox',
  consentID: 'e91f0b76-6145-4f50-bca0-08dbbdb41968',
  currency: Currency.EUR,
  displayName: 'MARIO ROSSI (2ccce116-3dc8-4ad0-83ac-8bf73d252c32)',
  expiryDate: '2023-12-24T11:41:17.2280342+00:00',
  iban: 'IT31X0301503200000003517230',
  id: '2ccce116-3dc8-4ad0-83ac-8bf73d252c32',
  identifier: {
    type: AccountIdentifierType.IBAN,
    iban: 'IT31X0301503200000003517230',
    currency: Currency.EUR,
  },
  isConnectedAccount: true,
  isDefault: false,
  merchantID: 'bf9e1828-c6a1-4cc5-a012-08daf2ff1b2d',
  sortCode: '',
  summary: 'MARIO ROSSI, IBAN: IT31X0301503200000003517230',
}

const eurCounterparty: LocalCounterparty = {
  name: 'John Doe',
  emailAddress: 'email@email.com',
  phoneNumber: '01234567890',
  identifier: eurAccountIdentifier,
  accountInfo: 'IE11MODR99035501927019',
}

const gbpCounterparty: LocalCounterparty = {
  name: 'John Doe GBP',
  emailAddress: '',
  phoneNumber: '',
  identifier: gbpAccountIdentifier,
  accountInfo: '12345678 - 123456',
}

const beneficiaries: LocalBeneficiary[] = [
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
  {
    id: '1',
    name: 'John Doe',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: gbpCounterparty,
    currency: Currency.GBP,
  },
  {
    id: '2',
    name: 'John Doe 2',
    merchantID: '1',
    yourReference: 'Test your reference',
    theirReference: 'Test their reference',
    destination: eurCounterparty,
    currency: Currency.EUR,
  },
]

export const users: UserRoleAndUserInvite[] = [
  {
    userID: '1',
    merchantID: '1',
    emailAddress: 'user1@user.com',
    name: 'John Doe',
    lastModified: new Date(),
    roleType: UserRoles.AdminApprover,
    status: UserStatus.Active,
  },
  {
    userID: '2',
    merchantID: '1',
    emailAddress: 'user2@user.com',
    name: 'Jane Doe',
    lastModified: new Date(),
    roleType: UserRoles.NewlyRegistered,
    status: UserStatus.Invited,
  },
  {
    userID: '3',
    merchantID: '1',
    emailAddress: 'user2@user.com',
    name: 'Joe Doe',
    lastModified: new Date(),
    roleType: UserRoles.NewlyRegistered,
    status: UserStatus.RolePending,
  },
  {
    userID: '4',
    merchantID: '1',
    emailAddress: 'user2@user.com',
    name: 'Joe Doe',
    lastModified: new Date(),
    roleType: UserRoles.PaymentRequestor,
    status: UserStatus.Active,
  },
  {
    userID: '4',
    merchantID: '1',
    emailAddress: 'user2@user.com',
    name: 'Joe Doe',
    lastModified: new Date(),
    roleType: UserRoles.User,
    status: UserStatus.Active,
  },
]

const accountsWithTransactionMetrics: LocalAccountWithTransactionMetrics[] = [
  {
    accountID: '7',
    accountName: 'E account',
    currency: Currency.GBP,
    balance: 100000,
    availableBalance: 100000,
    totalIncomingAmount: 100000,
    totalOutgoingAmount: 0,
    numberOfTransactions: 1,
    numberOfIncomingTransactions: 1,
    numberOfOutgoingTransactions: 0,
  },
  {
    accountID: '4',
    accountName: 'EURO Account 2',
    currency: Currency.EUR,
    balance: 100,
    availableBalance: 100,
    totalIncomingAmount: 200,
    totalOutgoingAmount: 100,
    numberOfTransactions: 2,
    numberOfIncomingTransactions: 1,
    numberOfOutgoingTransactions: 1,
  },
  {
    accountID: '1',
    accountName: 'EURO Account',
    currency: Currency.EUR,
    balance: 100,
    availableBalance: 100,
    totalIncomingAmount: 200,
    totalOutgoingAmount: 100,
    numberOfTransactions: 2,
    numberOfIncomingTransactions: 1,
    numberOfOutgoingTransactions: 1,
  },
  {
    accountID: '71',
    accountName: 'E account',
    currency: Currency.GBP,
    balance: 100000,
    availableBalance: 100000,
    totalIncomingAmount: 100000,
    totalOutgoingAmount: 0,
    numberOfTransactions: 1,
    numberOfIncomingTransactions: 1,
    numberOfOutgoingTransactions: 0,
  },
  {
    accountID: '41',
    accountName: 'GBP Account 2',
    currency: Currency.GBP,
    balance: 100,
    availableBalance: 100,
    totalIncomingAmount: 200,
    totalOutgoingAmount: 100,
    numberOfTransactions: 2,
    numberOfIncomingTransactions: 1,
    numberOfOutgoingTransactions: 1,
  },
  {
    accountID: '11',
    accountName: 'EUR Account',
    currency: Currency.EUR,
    balance: 100,
    availableBalance: 100,
    totalIncomingAmount: 200,
    totalOutgoingAmount: 100,
    numberOfTransactions: 2,
    numberOfIncomingTransactions: 1,
    numberOfOutgoingTransactions: 1,
  },
]

export const localInvoices: LocalInvoice[] = [
  {
    InvoiceNumber: 'INV-2000',
    PaymentTerms: 'NET 15',
    InvoiceDate: new Date('2024-11-01'),
    DueDate: new Date('2024-11-16'),
    Contact: 'Gamma Corp',
    DestinationIban: 'DE89370400440532013000',
    Currency: Currency.EUR,
    Subtotal: 1500,
    Discounts: 50,
    Taxes: 225,
    TotalAmount: 1675,
    OutstandingAmount: 1675,
    InvoiceStatus: 'Pending',
    Reference: 'PO2934',
    RemittanceEmail: 'billing@gammacorp.com',
  },
  {
    InvoiceNumber: 'INV-2001',
    PaymentTerms: 'NET 45',
    InvoiceDate: new Date('2024-11-03'),
    DueDate: new Date('2024-12-18'),
    Contact: 'Delta Enterprises',
    DestinationAccountNumber: 87654321,
    DestinationSortCode: 654321,
    Currency: Currency.GBP,
    Subtotal: 3000,
    Discounts: 150,
    Taxes: 450,
    TotalAmount: 3300,
    OutstandingAmount: 3300,
    InvoiceStatus: 'Issued',
    Reference: 'PO2987',
    RemittanceEmail: 'finance@deltaent.com',
  },
  {
    InvoiceNumber: 'INV-2002',
    PaymentTerms: 'NET 30',
    InvoiceDate: new Date('2024-11-05'),
    DueDate: new Date('2024-12-05'),
    Contact: 'Beta Industries',
    DestinationIban: 'FR7630006000011234567890189',
    Currency: Currency.EUR,
    Subtotal: 2500,
    Discounts: 125,
    Taxes: 375,
    TotalAmount: 2750,
    OutstandingAmount: 2750,
    InvoiceStatus: 'Overdue',
    Reference: 'PO3001',
    RemittanceEmail: 'accounts@betaind.com',
  },
  {
    InvoiceNumber: 'INV-2003',
    PaymentTerms: 'NET 60',
    InvoiceDate: new Date('2024-11-10'),
    DueDate: new Date('2025-01-09'),
    Contact: 'Alpha Solutions',
    DestinationIban: 'ES9121000418450200051332',
    Currency: Currency.EUR,
    Subtotal: 4500,
    Discounts: 200,
    Taxes: 675,
    TotalAmount: 4975,
    OutstandingAmount: 4975,
    InvoiceStatus: 'Pending',
    Reference: 'PO3015',
    RemittanceEmail: 'finance@alphasol.com',
  },
  {
    InvoiceNumber: 'INV-2004',
    PaymentTerms: 'NET 30',
    InvoiceDate: new Date('2024-11-15'),
    DueDate: new Date('2024-12-15'),
    Contact: 'Omega Products',
    DestinationAccountNumber: 11223344,
    DestinationSortCode: 112244,
    Currency: Currency.GBP,
    Subtotal: 1200,
    Discounts: 60,
    Taxes: 180,
    TotalAmount: 1320,
    OutstandingAmount: 1320,
    InvoiceStatus: 'Issued',
    Reference: 'PO3050',
    RemittanceEmail: 'accounts@omegaprod.com',
  },
  {
    InvoiceNumber: 'INV-2005',
    PaymentTerms: 'NET 45',
    InvoiceDate: new Date('2024-11-20'),
    DueDate: new Date('2025-01-04'),
    Contact: 'Zeta Services',
    DestinationIban: 'IT60X0542811101000000123456',
    Currency: Currency.EUR,
    Subtotal: 800,
    Discounts: 40,
    Taxes: 120,
    TotalAmount: 880,
    OutstandingAmount: 880,
    InvoiceStatus: 'Overdue',
    Reference: 'PO3080',
    RemittanceEmail: 'billing@zetaserv.com',
  },
  {
    InvoiceNumber: 'INV-2006',
    PaymentTerms: 'NET 15',
    InvoiceDate: new Date('2024-11-25'),
    DueDate: new Date('2024-12-10'),
    Contact: 'Lambda Tech',
    DestinationAccountNumber: 98765432,
    DestinationSortCode: 987654,
    Currency: Currency.GBP,
    Subtotal: 2100,
    Discounts: 105,
    Taxes: 315,
    TotalAmount: 2310,
    OutstandingAmount: 2310,
    InvoiceStatus: 'Pending',
    Reference: 'PO3100',
    RemittanceEmail: 'finance@lambdatech.com',
  },
  {
    InvoiceNumber: 'INV-2007',
    PaymentTerms: 'NET 30',
    InvoiceDate: new Date('2024-11-30'),
    DueDate: new Date('2024-12-30'),
    Contact: 'Kappa Consulting',
    DestinationIban: 'NL91 ABNA 0417 1643 00',
    Currency: Currency.EUR,
    Subtotal: 3100,
    Discounts: 155,
    Taxes: 465,
    TotalAmount: 3410,
    OutstandingAmount: 3410,
    InvoiceStatus: 'Issued',
    Reference: 'PO3125',
    RemittanceEmail: 'accounts@kappaconsult.com',
  },
  {
    InvoiceNumber: 'INV-2008',
    PaymentTerms: 'NET 30',
    InvoiceDate: new Date('2024-12-01'),
    DueDate: new Date('2024-12-31'),
    Contact: 'Iota Inc.',
    DestinationIban: 'BE68539007547034',
    Currency: Currency.EUR,
    Subtotal: 3700,
    Discounts: 185,
    Taxes: 555,
    TotalAmount: 4070,
    OutstandingAmount: 4070,
    InvoiceStatus: 'Pending',
    Reference: 'PO3150',
    RemittanceEmail: 'billing@iotainc.com',
  },
  {
    InvoiceNumber: 'INV-2009',
    PaymentTerms: 'NET 45',
    InvoiceDate: new Date('2024-12-05'),
    DueDate: new Date('2025-01-19'),
    Contact: 'Theta LLC',
    DestinationAccountNumber: 12398765,
    DestinationSortCode: 110022,
    Currency: Currency.GBP,
    Subtotal: 2200,
    Discounts: 110,
    Taxes: 330,
    TotalAmount: 2420,
    OutstandingAmount: 2420,
    InvoiceStatus: 'Issued',
    Reference: 'PO3180',
    RemittanceEmail: 'accounts@thetallc.com',
  },
  {
    InvoiceNumber: 'INV-2010',
    PaymentTerms: 'NET 60',
    InvoiceDate: new Date('2024-12-10'),
    DueDate: new Date('2025-02-08'),
    Contact: 'Epsilon Engineering',
    DestinationIban: 'PT50000201231234567890154',
    Currency: Currency.EUR,
    Subtotal: 2900,
    Discounts: 145,
    Taxes: 435,
    TotalAmount: 3190,
    OutstandingAmount: 3190,
    InvoiceStatus: 'Overdue',
    Reference: 'PO3205',
    RemittanceEmail: 'finance@epsiloneng.com',
  },
  {
    InvoiceNumber: 'INV-2011',
    PaymentTerms: 'NET 15',
    InvoiceDate: new Date('2024-12-15'),
    DueDate: new Date('2024-12-30'),
    Contact: 'Phi Pharmaceuticals',
    DestinationAccountNumber: 45612378,
    DestinationSortCode: 223344,
    Currency: Currency.GBP,
    Subtotal: 1300,
    Discounts: 65,
    Taxes: 195,
    TotalAmount: 1430,
    OutstandingAmount: 1430,
    InvoiceStatus: 'Pending',
    Reference: 'PO3230',
    RemittanceEmail: 'accounts@phipharma.com',
  },
  {
    InvoiceNumber: 'INV-2012',
    PaymentTerms: 'NET 30',
    InvoiceDate: new Date('2024-12-20'),
    DueDate: new Date('2025-01-19'),
    Contact: 'Xi Electronics',
    DestinationIban: 'LU280019400644750000',
    Currency: Currency.EUR,
    Subtotal: 2500,
    Discounts: 125,
    Taxes: 375,
    TotalAmount: 2750,
    OutstandingAmount: 2750,
    InvoiceStatus: 'Issued',
    Reference: 'PO3255',
    RemittanceEmail: 'billing@xielectronics.com',
  },
  {
    InvoiceNumber: 'INV-2013',
    PaymentTerms: 'NET 15',
    InvoiceDate: new Date('2024-12-25'),
    DueDate: new Date('2025-01-09'),
    Contact: 'Nu Media',
    DestinationIban: 'AT611904300234573201',
    Currency: Currency.EUR,
    Subtotal: 1800,
    Discounts: 90,
    Taxes: 270,
    TotalAmount: 1980,
    OutstandingAmount: 1980,
    InvoiceStatus: 'Pending',
    Reference: 'PO3280',
    RemittanceEmail: 'finance@numedia.com',
  },
  {
    InvoiceNumber: 'INV-2014',
    PaymentTerms: 'NET 30',
    InvoiceDate: new Date('2025-01-01'),
    DueDate: new Date('2025-01-31'),
    Contact: 'Omicron Software',
    DestinationAccountNumber: 78945612,
    DestinationSortCode: 334455,
    Currency: Currency.GBP,
    Subtotal: 2300,
    Discounts: 115,
    Taxes: 345,
    TotalAmount: 2530,
    OutstandingAmount: 2530,
    InvoiceStatus: 'Issued',
    Reference: 'PO3305',
    RemittanceEmail: 'accounts@omicronsoft.com',
  },
  {
    InvoiceNumber: 'INV-2015',
    PaymentTerms: 'NET 45',
    InvoiceDate: new Date('2025-01-05'),
    DueDate: new Date('2025-02-19'),
    Contact: 'Pi Retail',
    DestinationIban: 'GR1601101250000012547023795',
    Currency: Currency.EUR,
    Subtotal: 3200,
    Discounts: 160,
    Taxes: 480,
    TotalAmount: 3520,
    OutstandingAmount: 3520,
    InvoiceStatus: 'Overdue',
    Reference: 'PO3330',
    RemittanceEmail: 'billing@piretail.com',
  },
  {
    InvoiceNumber: 'INV-2016',
    PaymentTerms: 'NET 60',
    InvoiceDate: new Date('2025-01-10'),
    DueDate: new Date('2025-03-11'),
    Contact: 'Rho Consulting',
    DestinationAccountNumber: 98765432,
    DestinationSortCode: 556677,
    Currency: Currency.GBP,
    Subtotal: 4100,
    Discounts: 205,
    Taxes: 615,
    TotalAmount: 4510,
    OutstandingAmount: 4510,
    InvoiceStatus: 'Pending',
    Reference: 'PO3355',
    RemittanceEmail: 'finance@rhoconsult.com',
  },
  {
    InvoiceNumber: 'INV-2017',
    PaymentTerms: 'NET 30',
    InvoiceDate: new Date('2025-01-15'),
    DueDate: new Date('2025-02-14'),
    Contact: 'Sigma Engineering',
    DestinationIban: 'CY17002001280000001200527600',
    Currency: Currency.EUR,
    Subtotal: 2800,
    Discounts: 140,
    Taxes: 420,
    TotalAmount: 3080,
    OutstandingAmount: 3080,
    InvoiceStatus: 'Issued',
    Reference: 'PO3380',
    RemittanceEmail: 'accounts@sigmaeng.com',
  },
]

export default {
  fewPaymentRequests,
  paymentRequest: {
    regular,
    noShippingAddress,
    partiallyPaidPaymentRequest,
    unpaidPaymentRequest,
    overpaidPaymentRequest,
  },
  merchantTags: mockMerchantTags,
  account,
  accounts,
  accountsWithTransactionMetrics,
  counterparty: eurCounterparty,
  beneficiaries: beneficiaries,
  payout: {
    pendingApproval: mockPayouts.find((p) => p.status === PayoutStatus.PENDING_APPROVAL),
    queued: mockPayouts.find((p) => p.status === PayoutStatus.QUEUED),
    processed: mockPayouts.find((p) => p.status === PayoutStatus.PROCESSED),
    failed: mockPayouts.find((p) => p.status === PayoutStatus.FAILED),
  },
  user: {
    all: users,
    active: users.filter((u) => u.status === UserStatus.Active),
    invited: users.filter((u) => u.status === UserStatus.Invited),
    rolePending: users.filter((u) => u.status === UserStatus.RolePending),
  },
}
